/**
 * 템플릿 리터럴로 동적인 문자열 생성하기
 * 
 * ES6에 추가된 템플릿 리터럴은 변수를 이용해서 동적으로 문자열을 생성할 수 있는 문법이다.
 * ES6 이전에 동적으로 문자열을 생성할 때는 다음과 같은 코드를 사용했다.
 * 
 */

// ES6 이전에 동적인 문자열을 생성하는 코드
(() => {
    var name = 'mike';
    var score = 80;
    // 더하기 기호와 따옴표를 반복적으로 사용해서 문자열을 생성한다.
    var msg = 'name: ' + name + ', score/100: ' + score / 100;

    // 템플릿 리터럴을 사용한 코드.
    // 템플릿 리터럴은 백틱(``)을 이용한다. 표현식(expression)을 사용할 때는 ${expression} 형식으로 입력한다.
    const msg2 = `name: ${name}, score/100: ${score / 100}`;
})();

/**
 * 여러 줄의 문자열 입력하기
 * 
 * 템플릿 리터럴을 사용하면 여러 줄의 문자열을 생성하기 쉽다.
 * ES6 이전에는 여러 줄의 문자열을 생성하기 위해서 다음과 같이 작성했다
 * 
 */

// ES5에서 여러 줄의 문자열을 생성하는 코드
(() => {
    // 줄의 끝에 \n 기호를 입력하면 줄 바꿈이 된다.
    // 이 방법 외에도 역슬래시(\)를 이용한 방법이 있지만 표현식이 들어가는 경우 복잡해지는 건 마찬가지다.
    var name, age, score;
    const msg = 'name: ' + name + '\n' +
    'age: ' + age + '\n' +
    'score: ' + score + '\n';

    // 템플릿 리터럴을 이용해서 여러 줄의 문자열을 생성하는 코드
    // 줄의 끝에 \n 기호를 입력할 필요가 없다. 이전의 ES5 코드와 비교해 보면 코드 입력 속도와 가독성 면에서 우수하다는 것을 알 수 있다.
    const msg2 = `name: ${name}
    age: ${age}
    score: ${score}`;
})();


(() => {
    
})();